#!/bin/bash

# KIRI DOCKER

show_help()
{
	read -r -d '' help_message <<- EOM
	USAGE

	    ${0} [OPTIONS] [REPO_PATH] [-k|--kiri [ARGS]

	OPTIONS

	    -h|--help            Show version
	    -v|--version         Show version
	    -d|--dont-run        Do not run kiri
	    -i|--docker-img IMG  Set docker image, default is leoheck/kiri:tag
	    -c|--cmd CMD         Run a command given by a string
	    -k|--kiri ARGS       Pass a string with arguments to Kiri

	REPO_PATH

	    If repo path is given it is mounted inside the container,
	    otherwise it is not used. If the repo path is given then
	    kiri will run by default, otherwise it won't.

	EOM

	echo -e "\n${help_message}\n"
}

get_kiri_docker_version()
{
	local tool_path
	local git_dir_path
	local last_commit_hash
	local last_commit_date

	tool_path=$(dirname "$(dirname "$(which ${0})")")
	git_dir_path="${tool_path}/.git"

	if [[ -d "${git_dir_path}" ]]; then
		last_commit_hash=$(git --git-dir "${git_dir_path}" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${git_dir_path}" log -1 --format="%at" | xargs -I{} date -d @{} +"%Y/%m/%d %Hh%M")
		echo "${last_commit_hash} ${last_commit_date}"
	else
		echo "Unknown"
	fi
}

show_version()
{
	IFS= read -r -d '' VERSION <<-EOM
	    $(basename "${0}")-docker $(get_kiri_docker_version)
	EOM

	printf "\n%s" "$VERSION"
}

command_line_parse()
{
	run_kiri=1

	while [[ ${#} -gt 0 ]]; do

		local key="${1}"

		case "${key}" in

			-h|--help)
				show_help
				exit 0
				;;

			-v|--version)
				shift
				show_version
				version_flag=1
				kiri_args="-v${kiri_args}"
				;;

			-d|--dont-run)
				shift
				run_kiri=0
				;;

			-i|--docker-img)
				docker_image=${2}
				shift
				shift
				;;

			-c|--cmd)
				run_cmd="${2}"
				shift
				shift
				;;

			-k|--kiri)
				shift
				kiri_args="${kiri_args} ${@}"
				break
				;;

			--*|-*)
				echo "Unknown argument '${1}'"
				exit 1
				;;

			*)
				repo_path="${1}"
				shift
				;;
		esac
	done

	if [[ -n ${version_flag} ]] && [[ -z ${repo_path} ]]; then
		exit 0
	fi
}

main()
{
	shift
	command_line_parse "${@}"

	repo_dir=$(basename "${repo_path}")
	docker_repo_path="/home/kiri/${repo_dir}"

	if [[ -z "${docker_image}" ]]; then
		container_img="leoheck/kiri"
	else
		container_img="${docker_image}"
	fi

	container_name=kiri
	container_tag=latest

	if echo "${kiri_args}" | grep -q -- '-v'; then
		kiri_version_flag=1
	fi

	if [[ -z ${version_flag} ]] && [[ -z ${kiri_version_flag} ]]; then
		echo
		echo "| KiRI Docker"
		echo "| Image: ${container_img}"
		echo "| Container: ${container_name}"

		if [[ -n "${repo_path}" ]]; then
			echo "| Repo Path: ${repo_path}"
		fi
		if [[ -n "${run_cmd}" ]]; then
			echo "| Run Cmd: ${run_cmd}"
			run_cmd="-c \"${run_cmd}\""
		fi
		if [[ -n "${repo_path}" ]] && [[ -n "${kiri_args}" ]]; then
			echo "| Kiri Args: $(echo ${kiri_args} | sed "s/^[ ]\+//g")"
		fi
		echo
	fi

	# Run these in the host machine
	XSOCK=/tmp/.X11-unix
	XAUTH=/tmp/.docker.xauth
	xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -

	setfacl -m user:1000:r "${HOME}/.Xauthority"

	if [[ -n "${repo_path}" ]]; then
		if [[ "${run_kiri}" == "1" ]]; then
			read -r -d '' KIRI_SCRIPT <<- EOM
			    cd "${docker_repo_path}" || exit 1 ;\
			    sudo -H Xvfb -f \${DISPLAY} -screen 0 1280x800x24 -ac -dpi 96 +extension RANDR :1 > /dev/null 2>&1 \& ;\
			    xvfb-run kiri -i \$(ip) ${kiri_args} ;\
			    zsh -i
			EOM
		else
			read -r -d '' KIRI_SCRIPT <<- EOM
			    cd "${docker_repo_path}" || exit 1 ;\
			    zsh -i ${run_cmd}
			EOM
		fi
	fi

	if [[ -n "${version_flag}" ]] || [[ -n "${kiri_version_flag}" ]]; then
		read -r -d '' KIRI_SCRIPT <<- EOM
		    kiri ${kiri_args}
		EOM
	fi

	if [[ -z "${repo_path}" ]]; then
		read -r -d '' KIRI_SCRIPT <<- EOM
		    zsh -i ${run_cmd}
		EOM
	fi

	if [[ -n "${repo_path}" ]]; then
		docker run \
			-it \
			--rm \
			-e DISPLAY \
			--hostname="kiri" \
			--net=bridge \
			--name ${container_name} \
			--mount type=bind,source="${repo_path}",target="${docker_repo_path}" \
			-v ${XSOCK}:${XSOCK} \
			-v ${XAUTH}:${XAUTH} \
			-e XAUTHORITY=${XAUTH} \
			${container_img} \
			zsh -i -c "${KIRI_SCRIPT}"
	else
		docker run \
			-it \
			--rm \
			-e DISPLAY \
			--hostname="kiri" \
			--net=bridge \
			--name ${container_name} \
			-v ${XSOCK}:${XSOCK} \
			-v ${XAUTH}:${XAUTH} \
			-e XAUTHORITY=${XAUTH} \
			${container_img} \
			zsh -i -c "${KIRI_SCRIPT}"
	fi

	# make sure the container has stoped
	docker stop ${container_name} &> /dev/null
}

main "${0}" "${@}"
